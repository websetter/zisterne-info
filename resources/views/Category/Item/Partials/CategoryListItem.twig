{{ component( "Ceres::Basket.Components.AddToBasket" ) }}

{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}
{% import "Ceres::PageDesign.Macros.ItemName" as ItemName %}

{% set image = item.data.images.all | first %}
{% set itemUrl =  item.data | itemURL %}

{% if enableCarousel is not defined %}
    {% set enableCarousel = ceresConfig.item.enableImageCarousel %}
{% endif %}

<article class="product-inner">
    <div class="thumb-inner">
        <div class="thumb-image">
            <div class="square-container">
                <div class="square-inner main-image">
                    <category-image-carousel
                        template="#vue-category-image-carousel"
                        :image-urls-data="{{ item.data.images | json_encode() }} | itemImages('urlMiddle')"
                        alt-text="{{ ItemName.get(item.data | itemName, item.data.variation.bundleType) }}"
                        title-text="{{ ItemName.get(item.data | itemName, item.data.variation.bundleType) }}"
                        item-url="{{ itemUrl }}"
                        :show-dots="{{ ceresConfig.item.categoryShowDots | json_encode }}"
                        :show-nav="{{ ceresConfig.item.categoryShowNav | json_encode }}"
                        :enable-carousel="{{ enableCarousel | json_encode }}">
                    </category-image-carousel>

                    <noscript>
                        <a href="{{ itemUrl }}">
                          <img class="img-fluid" src="{{ image.urlMiddle }}" title="{{ ItemName.get(item.data | itemName, item.data.variation.bundleType) }}" alt="{{ ItemName.get(item.data | itemName, item.data.variation.bundleType) }}">
                        </a>
                    </noscript>
                </div>
            </div>
        </div>

        <!-- STORE SPECIALS -->
        {% if item.data.item.storeSpecial.id > 0 or item.data.variation.bundleType == "bundle" %}
          {% set storeSpecial = item.data.item.storeSpecial.names.name %}
            <div class="special-tags">
                {% if  item.data.item.storeSpecial.id == 1 %}
                    {% set storeSpecialColor = 'danger' %}
                    {% set percent = 0 %}
                    {% if item.data.prices.rrp is defined %}
                        {% set percent = (1 - item.data.prices.default.unitPrice.value / item.data.prices.rrp.price.value ) * -100 %}
                    {% endif %}
                    {% if percent <= 0 %}
                        {% set dezimalcount = ceresConfig.item.storeSpecial %}
                        {% set percent = percent | number_format(dezimalcount, ',', '.') %}
                        {% set storeSpecial = percent ~"%" %}
                    {% endif %}
                {% elseif  item.data.item.storeSpecial.id == 2 %}
                    {% set storeSpecialColor = 'primary' %}
                {% elseif  item.data.item.storeSpecial.id == 3 %}
                    {% set storeSpecialColor = 'success' %}
                {% endif %}
                {% if item.data.variation.bundleType == "bundle" %}
                    <span class="tag bg-info">
                        {{ trans("Ceres::Template.itemBundle") }}
                    </span>
                {% else %}
                    <span class="tag bg-{{ storeSpecialColor }}">
                        {{ storeSpecial }}
                    </span>
                {% endif %}
            </div>
        {% endif %}
        <!-- ./STORE SPECIALS -->

        <hr>
        <div class="thumb-content">
          <a href="{{ itemUrl }}" class="thumb-title">
              {{ ItemName.get(item.data | itemName, item.data.variation.bundleType) }}
          </a>
          {{ LayoutContainer.show("Ceres::CategoryItem.BeforePrices", item.data) }}

          <div class="prices">
                <del class="crossprice">
                  {% if item.data.prices.rrp is defined and item.data.prices.rrp.price.value != 0 and item.data.prices.rrp.price.value > item.data.prices.default.unitPrice.value %}
                    {{ trans("ZisterneInfo::Template.UVP") }} {{ item.data.prices.rrp.price.formatted }}
                   {% endif %}
                </del>
              <div class="price">
                  {{ item.data.prices.default.unitPrice.formatted }}
              </div>

              <div class="artSold">
                {%  for variationProperty in item.data.variationProperties %}
                   {% if variationProperty.property.id == 1 %}
                     <p>{{ variationProperty.values.value }} verkauft*</p>
                  {% endif %}
                {% endfor %}
              </div>





          </div>
          {% if not (item.data.unit.unitOfMeasurement == 'C62' and item.data.unit.content == 1) %}
              <div class="category-unit-price">
                  <span>{{ item.data.unit.content }}</span>
                  <span>{{ item.data.unit.names.name }}</span>

                  {% if item.data.variation.mayShowUnitPrice %}
                      | {{ item.data.prices.default.basePrice }}
                  {% endif %}
              </div>
          {% endif %}
          {{ LayoutContainer.show("Ceres::CategoryItem.AfterPrices", item.data) }}
        </div>
        <hr>
    </div>
</article>
